# lua_package_path '/foo/bar/?.lua;/blah/?.lua;;';
lua_package_cpath '/usr/lib/lua/5.1/?.so;;';




lua_shared_dict tenants 1m;
init_by_lua_block {
    require('cjson')
    local tenants = ngx.shared.tenants

    local org_mapping_file = os.getenv('ORG_MAPPING_FILE')
    if not org_mapping_file then
        ngx.log(ngx.EMERG, "No ORG_MAPPING_FILE env")
        return
    end
    local fd = io.open(org_mapping_file, 'rb')
    if not fd then
        ngx.log(ngx.EMERG, "No ORG_MAPPING_FILE env")
        return
    end
    for line in fd:lines() do
        ngx.log(ngx.CRIT, line)
        local key, value = string.match(line, '([^ ]+) (.*)')
        ngx.log(ngx.CRIT, string.format(' read mapping %s, %s', key, value))
        success, err, forcibale = tenants:set(key, value)
        if not success then
            ngx.log(ngx.CRIT, err)
        end
    end
    fd:close()

}
server {
    listen 80;

    # built in docker resolver
    resolver 127.0.0.11;
    error_log /dev/stdout debug;

    location / {
        set $tenant_domain "";
        access_by_lua_block {
            local cjson_safe = require 'cjson.safe'
            local tenants = ngx.shared.tenants

            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            if not body then
                ngx.exit(400)
                return
            end
            local payload = cjson_safe.decode(body)
            if not (payload and payload['OrganizationId']) then
                ngx.exit(400)
                return
            end
            -- lookup here
            local orgid = payload['OrganizationId']
            local tenant = tenants:get(orgid)
            if not tenant then
                ngx.exit(400)
                return
            end
            ngx.var.tenant_domain = tenant
            ngx.log(ngx.WARN, string.format("org %s tenant %s", orgid, tenant))
        }
        proxy_set_header Host $tenant_domain;
        proxy_pass http://$tenant_domain:8080/2943b8e3-ac65-49fe-8eb7-319484b823fc;
    }
}
