# lua_package_path '/foo/bar/?.lua;/blah/?.lua;;';
lua_package_cpath '/usr/lib/lua/5.1/?.so;;';

init_by_lua_block {
    orgs = {
        org1 ={ "test1", "test1:8080/a1f81239-ac16-4c00-93d2-73911c22609c"},
        org2 = {"test2", "test2:8080/889acc59-1e61-40c9-b6b1-a20b3ae59f63"},
    }
}
server {
    listen 80;

    # built in docker resolver
    resolver 127.0.0.11;

    location / {
        set $tenant_host "";
        set $tenant_domain "";
        access_by_lua_block {
            local cjson_safe = require 'cjson.safe'
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            if not body then
                ngx.exit(400)
                return
            end
            local payload = cjson_safe.decode(body)
            if not (payload and payload['OrganizationId']) then
                ngx.exit(400)
                return
            end
            -- lookup here
            local orgid = payload['OrganizationId']
            local tenant = orgs[orgid]
            if not tenant then
                ngx.exit(400)
                return
            end
            ngx.var.tenant_host = tenant[1]
            ngx.var.tenant_domain = tenant[2]
            ngx.log(ngx.WARN, "tenant")
            ngx.log(ngx.WARN, tenant[1])
            ngx.log(ngx.WARN, tenant[2])
        }
        proxy_set_header Host $tenant_host;
        proxy_pass http://$tenant_domain;
    }
}
